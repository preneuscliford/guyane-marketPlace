"use client";

import { useState, useEffect, useCallback } from "react";
import { Button } from "@/components/ui/Button";
import { Textarea } from "@/components/ui/Textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/Input";
import CommunityPost from "@/components/community/CommunityPost";
import SponsoredBanner from "@/components/advertisements/SponsoredBanner";
import FeedbackModal from "@/components/feedback/FeedbackModal";
import { useAuth } from "@/hooks/useAuth";
import { supabase } from "@/lib/supabase";
import { toast } from "sonner";
import {
  Users,
  MessageSquare,
  TrendingUp,
  Plus,
  Search,
  Filter,
  MessageCircle,
  Heart,
  Share2,
  HelpCircle,
} from "lucide-react";
import { formatDistanceToNow } from "date-fns";
import { fr } from "date-fns/locale";

interface Profile {
  id: string;
  username: string;
  avatar_url?: string;
  full_name?: string; // Utilise full_name au lieu de business_name
  bio?: string; // Ajout du champ bio qui existe dans la DB
}

interface Like {
  user_id: string;
}

interface Post {
  id: string;
  user_id: string; // Changed from author_id to match database
  content: string;
  image_url?: string | null; // Added to match database
  created_at: string;
  updated_at: string;
  is_hidden: boolean;
  hidden_by?: string | null; // Added to match database
  hidden_at?: string | null; // Added to match database
  hidden_reason?: string | null; // Added to match database

  // Données des jointures
  profiles?: Profile; // Made optional since we'll add it manually
  likes?: Like[]; // Le tableau des likes récupéré par la jointure

  // Custom fields added by our app logic
  like_count?: number; // Made optional, calculated from likes
  comment_count?: number; // Made optional, calculated from comments
  user_liked?: boolean; // Optional
}

interface CommunityStats {
  total_posts: number;
  total_users: number;
  posts_today: number;
  active_users: number;
}

/**
 * Page principale de la communauté avec système de posts imbriqués,
 * affiches publicitaires intégrées et statistiques
 */
export default function CommunautePage() {
  const { user } = useAuth();
  const [posts, setPosts] = useState<Post[]>([]);
  const [loading, setLoading] = useState(true);
  const [newPostContent, setNewPostContent] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortBy, setSortBy] = useState("recent");
  const [stats, setStats] = useState<CommunityStats>({
    total_posts: 0,
    total_users: 0,
    posts_today: 0,
    active_users: 0,
  });

  /**
   * Charge les posts de la communauté
   * Fonction définie avec useCallback plus bas
   */
        // Processus en deux étapes pour éviter les problèmes TypeScript

        // 1. Nettoyer les données pour corriger les types
        const cleanedData = data.map((rawPost) => {
          // Créer un nouveau post avec des valeurs par défaut correctes
          const post: Post = {
            id: rawPost.id || "",
            user_id: rawPost.user_id || "",
            content: rawPost.content || "",
            image_url: rawPost.image_url,
            created_at: rawPost.created_at || new Date().toISOString(),
            updated_at: rawPost.updated_at || new Date().toISOString(),
            is_hidden: rawPost.is_hidden || false,
            hidden_by: rawPost.hidden_by,
            hidden_at: rawPost.hidden_at,
            hidden_reason: rawPost.hidden_reason,
            // Définir un profil par défaut si nécessaire
            profiles:
              rawPost.profiles &&
              !("error" in rawPost.profiles) &&
              !("code" in rawPost.profiles) &&
              !("message" in rawPost.profiles)
                ? (rawPost.profiles as Profile)
                : { id: "", username: "Utilisateur inconnu" },
            // Convertir les likes en tableau propre
            likes: Array.isArray(rawPost.likes) ? rawPost.likes : [],
          };
          return post;
        });

        // 2. Ajouter les données calculées
        const processedPosts = cleanedData.map((post) => {
          const like_count = post.likes ? post.likes.length : 0;
          const user_liked =
            user && post.likes
              ? post.likes.some((like) => like.user_id === user.id)
              : false;

          return {
            ...post,
            like_count,
            comment_count: 0, // Par défaut, nous allons chercher les commentaires séparément
            user_liked,
          };
        });

        // 3. Mise à jour de l'état avec les posts traités
        setPosts(processedPosts);

        // 4. Optionnel : Récupérer le nombre de commentaires pour chaque post
        // Cette partie est optionnelle car elle ajoute une requête supplémentaire
        const fetchCommentCounts = async () => {
          try {
            // Vérifier s'il y a des posts à traiter
            if (!processedPosts.length) {
              console.log("Aucun post à compter pour les commentaires");
              return;
            }

            // Récupérer les IDs des posts
            const postIds = processedPosts.map((p) => p.id);
            console.log("Récupération des commentaires pour les posts:", postIds);

            const { data: commentsData, error: commentsError } = await supabase
              .from("posts")
              .select("parent_id, id")
              .in("parent_id", postIds)
              .eq("is_hidden", false);

            if (commentsError) {
              console.error("Erreur Supabase lors du comptage des commentaires:", {
                message: commentsError.message,
                details: commentsError.details,
                code: commentsError.code
              });
              throw commentsError;
            }

            // Afficher les données pour le débogage
            console.log("Commentaires récupérés:", commentsData?.length || 0);

            // Compter les commentaires par post
            const commentCounts: Record<string, number> = {};
            commentsData?.forEach((comment) => {
              if (comment.parent_id) {
                commentCounts[comment.parent_id] =
                  (commentCounts[comment.parent_id] || 0) + 1;
              }
            });

            console.log("Compteurs de commentaires:", commentCounts);

            // Mettre à jour les posts avec le nombre de commentaires
            setPosts((currentPosts) =>
              currentPosts.map((post) => ({
                ...post,
                comment_count: commentCounts[post.id] || 0,
              }))
            );
          } catch (error) {
            if (error instanceof Error) {
              console.error("Erreur lors du comptage des commentaires:", {
                message: error.message,
                name: error.name,
                stack: error.stack
              });
            } else {
              console.error("Erreur inconnue lors du comptage des commentaires:", error);
            }
          }
        };

        fetchCommentCounts();

        console.log("Processed posts:", processedPosts);
        setPosts(processedPosts);
      } catch (processError) {
        console.error("Error processing posts:", processError);

        // If processing fails, display at least the raw data
        // @ts-expect-error - Force the type to match our interface
        setPosts(data);
      }
    } catch (error) {
      console.error("Erreur lors du chargement des posts:", error);

      // Log more detailed error information
      if (error instanceof Error) {
        console.error("Error details:", {
          message: error.message,
          stack: error.stack,
          name: error.name,
          toJSON: JSON.stringify(error, Object.getOwnPropertyNames(error)),
        });
        toast.error(`Erreur: ${error.message || "Inconnue"}`);
      } else {
        console.error(
          "Unknown error type:",
          typeof error,
          JSON.stringify(error)
        );
        toast.error("Erreur lors du chargement des posts");
      }

      // Set dummy posts anyway to show something
      const dummyPosts: Post[] = [
        {
          id: "1",
          content:
            "Erreur de chargement des posts. Veuillez réessayer plus tard.",
          user_id: "system",
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          is_hidden: false,
          like_count: 0,
          comment_count: 0,
          profiles: {
            id: "system",
            username: "Système",
            avatar_url: undefined,
            full_name: undefined,
            bio: undefined,
          },
        },
      ];

      setPosts(dummyPosts);
    } finally {
      setLoading(false);
    }
  };

  /**
   * Charge les statistiques de la communauté
   */
  const fetchStats = async () => {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const todayISO = today.toISOString();

      // Total des posts
      const { count: totalPosts } = await supabase
        .from("posts")
        .select("*", { count: "exact", head: true })
        .eq("is_hidden", false);

      // Posts d'aujourd'hui
      const { count: postsToday } = await supabase
        .from("posts")
        .select("*", { count: "exact", head: true })
        .eq("is_hidden", false)
        .gte("created_at", todayISO);

      // Total des utilisateurs
      const { count: totalUsers } = await supabase
        .from("profiles")
        .select("*", { count: "exact", head: true });

      // Utilisateurs actifs (ayant posté dans les 7 derniers jours)
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      const weekAgoISO = weekAgo.toISOString();

      const { data: activeUsersData } = await supabase
        .from("posts")
        .select("user_id")
        .gte("created_at", weekAgoISO)
        .eq("is_hidden", false);

      const activeUsers = new Set(activeUsersData?.map((p) => p.user_id)).size;

      setStats({
        total_posts: totalPosts || 0,
        total_users: totalUsers || 0,
        posts_today: postsToday || 0,
        active_users: activeUsers,
      });
    } catch (error) {
      console.error("Erreur lors du chargement des statistiques:", error);
    }
  };

  /**
   * Publie un nouveau post
   */
  const submitPost = async () => {
    if (!user || !newPostContent.trim()) return;

    setIsSubmitting(true);
    try {
      const { data, error } = await supabase
        .from("posts")
        .insert({
          content: newPostContent.trim(),
          user_id: user.id,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          is_hidden: false,
        })
        .select(
          `
          *,
          profiles:user_id(id, username, avatar_url, full_name, bio)
        `
        )
        .single();

      if (error) {
        console.error("Error submitting post:", {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code,
        });
        throw error;
      }

      const newPost = {
        ...data,
        user_liked: false,
        like_count: 0,
      };

      setPosts((prev) => [newPost, ...prev]);
      setNewPostContent("");
      toast.success("Post publié avec succès!");

      // Recharger les statistiques
      fetchStats();
    } catch (error) {
      console.error("Erreur lors de la publication:", error);
      toast.error("Erreur lors de la publication");
    } finally {
      setIsSubmitting(false);
    }
  };

  /**
   * Gère la recherche
   */
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    fetchPosts();
  };

  // Wrapped fetchPosts to avoid dependency issues
  // Utilisez useCallback pour fetchPosts pour éviter les récursions infinies
  const fetchPosts = useCallback(async () => {
    try {
      // Log for debugging
      console.log("Testing Supabase connection to match actual schema");

      // Query that matches the actual database schema
      let query = supabase
        .from("posts")
        .select(
          `
          id,
          user_id, 
          content,
          image_url,
          created_at,
          updated_at,
          is_hidden,
          profiles:user_id (id, username, avatar_url, full_name, bio),
          likes(user_id)
        `
        ) // Using profiles as a join on user_id and also fetching likes
        .eq("is_hidden", false)
        .eq("parent_id", null) // Ne récupérer que les posts principaux, pas les réponses
        ;

      // Filtrage par recherche
      if (searchQuery.trim()) {
        query = query.ilike("content", `%${searchQuery}%`);
      }

      // Always sort by created_at for now (can add like counts later)
      query = query.order("created_at", { ascending: false });

      const { data, error } = await query;

      if (error) {
        console.error("Supabase query error details:", {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code,
        });
        toast.error(
          `Erreur de table: ${
            error.message || error.details || error.hint || "Inconnue"
          }`
        );
        throw error;
      }

      console.log("Posts data received:", data);

      if (!data || data.length === 0) {
        console.log("No posts found");
        setPosts([]);
        return;
      }

      // Try to fetch likes count for each post
      // Note: This is a separate query since your schema doesn't include like_count directly
      try {
        // Processus en deux étapes pour éviter les problèmes TypeScript
        
        // 1. Nettoyer les données pour corriger les types
        const cleanedData = data.map((rawPost) => {
          // Créer un nouveau post avec des valeurs par défaut correctes
          const post: Post = {
            id: rawPost.id || "",
            user_id: rawPost.user_id || "",
            content: rawPost.content || "",
            image_url: rawPost.image_url,
            created_at: rawPost.created_at || new Date().toISOString(),
            updated_at: rawPost.updated_at || new Date().toISOString(),
            is_hidden: rawPost.is_hidden || false,
            hidden_by: rawPost.hidden_by,
            hidden_at: rawPost.hidden_at,
            hidden_reason: rawPost.hidden_reason,
            // Définir un profil par défaut si nécessaire
            profiles: (rawPost.profiles && 
              !("error" in rawPost.profiles) && 
              !("code" in rawPost.profiles) &&
              !("message" in rawPost.profiles))
              ? rawPost.profiles as Profile
              : { id: "", username: "Utilisateur inconnu" },
            // Convertir les likes en tableau propre
            likes: Array.isArray(rawPost.likes) ? rawPost.likes : []
          };
          return post;
        });
        
        // 2. Ajouter les données calculées
        const processedPosts = cleanedData.map(post => {
          const like_count = post.likes ? post.likes.length : 0;
          const user_liked = user && post.likes ? 
            post.likes.some(like => like.user_id === user.id) 
            : false;
          
          return {
            ...post,
            like_count,
            comment_count: 0, // Par défaut, nous allons chercher les commentaires séparément
            user_liked
          };
        });
        
        // 3. Mise à jour de l'état avec les posts traités
        setPosts(processedPosts);
        
        // 4. Optionnel : Récupérer le nombre de commentaires pour chaque post
        // Cette partie est optionnelle car elle ajoute une requête supplémentaire
        const fetchCommentCounts = async () => {
          try {
            // Vérifier s'il y a des posts à traiter
            if (!processedPosts.length) {
              console.log("Aucun post à compter pour les commentaires");
              return;
            }

            // Récupérer les IDs des posts
            const postIds = processedPosts.map((p) => p.id);
            console.log("Récupération des commentaires pour les posts:", postIds);

            const { data: commentsData, error: commentsError } = await supabase
              .from("posts")
              .select("parent_id, id")
              .in("parent_id", postIds)
              .eq("is_hidden", false);

            if (commentsError) {
              console.error("Erreur Supabase lors du comptage des commentaires:", {
                message: commentsError.message,
                details: commentsError.details,
                code: commentsError.code
              });
              throw commentsError;
            }

            // Afficher les données pour le débogage
            console.log("Commentaires récupérés:", commentsData?.length || 0);

            // Compter les commentaires par post
            const commentCounts: Record<string, number> = {};
            commentsData?.forEach((comment) => {
              if (comment.parent_id) {
                commentCounts[comment.parent_id] =
                  (commentCounts[comment.parent_id] || 0) + 1;
              }
            });

            console.log("Compteurs de commentaires:", commentCounts);

            // Mettre à jour les posts avec le nombre de commentaires
            setPosts((currentPosts) =>
              currentPosts.map((post) => ({
                ...post,
                comment_count: commentCounts[post.id] || 0,
              }))
            );
          } catch (error) {
            if (error instanceof Error) {
              console.error("Erreur lors du comptage des commentaires:", {
                message: error.message,
                name: error.name,
                stack: error.stack
              });
            } else {
              console.error("Erreur inconnue lors du comptage des commentaires:", error);
            }
          }
        };
        
        fetchCommentCounts();

        console.log("Processed posts:", processedPosts);
      } catch (processError) {
        console.error("Error processing posts:", processError);

        // If processing fails, display at least the raw data
        // @ts-expect-error - Force the type to match our interface
        setPosts(data);
      }
    } catch (error) {
      console.error("Erreur lors du chargement des posts:", error);

      // Log more detailed error information
      if (error instanceof Error) {
        console.error("Error details:", {
          message: error.message,
          stack: error.stack,
          name: error.name,
          toJSON: JSON.stringify(error, Object.getOwnPropertyNames(error)),
        });
        toast.error(`Erreur: ${error.message || "Inconnue"}`);
      } else {
        console.error(
          "Unknown error type:",
          typeof error,
          JSON.stringify(error)
        );
        toast.error("Erreur lors du chargement des posts");
      }

      // Set dummy posts anyway to show something
      const dummyPosts: Post[] = [
        {
          id: "1",
          content:
            "Erreur de chargement des posts. Veuillez réessayer plus tard.",
          user_id: "system",
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          is_hidden: false,
          like_count: 0,
          comment_count: 0,
          profiles: {
            id: "system",
            username: "Système",
            avatar_url: undefined,
            full_name: undefined,
            bio: undefined,
          },
        },
      ];

      setPosts(dummyPosts);
    } finally {
      setLoading(false);
    }
  }, [searchQuery, user, sortBy]); // Dépendances à surveiller

  const refreshPosts = useCallback(() => {
    fetchPosts();
  }, [fetchPosts]);

  useEffect(() => {
    refreshPosts();
    fetchStats();
  }, [refreshPosts, sortBy]);

  useEffect(() => {
    if (!searchQuery.trim()) {
      refreshPosts();
    }
  }, [refreshPosts, searchQuery]);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header de la communauté */}
      <div className="bg-white border-b">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
                <Users className="h-8 w-8 text-teal-600" />
                Communauté
              </h1>
              <p className="text-gray-600 mt-2">
                Partagez, discutez et connectez-vous avec la communauté
                guyanaise
              </p>
            </div>

            <FeedbackModal>
              <Button variant="outline" className="flex items-center gap-2">
                <HelpCircle className="h-4 w-4" />
                Feedback
              </Button>
            </FeedbackModal>
          </div>

          {/* Statistiques */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-teal-600">
                  {stats.total_posts}
                </div>
                <div className="text-sm text-gray-600">Posts totaux</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {stats.total_users}
                </div>
                <div className="text-sm text-gray-600">Membres</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-600">
                  {stats.posts_today}
                </div>
                <div className="text-sm text-gray-600">Posts aujourd'hui</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {stats.active_users}
                </div>
                <div className="text-sm text-gray-600">Actifs (7j)</div>
              </CardContent>
            </Card>
          </div>

          {/* Barre de recherche et filtres */}
          <div className="flex flex-col md:flex-row gap-4">
            <form onSubmit={handleSearch} className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Rechercher dans les discussions..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
            </form>

            <Select value={sortBy} onValueChange={setSortBy}>
              <SelectTrigger className="w-48">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="recent">Plus récents</SelectItem>
                <SelectItem value="popular">Plus populaires</SelectItem>
                <SelectItem value="discussed">Plus commentés</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Colonne principale */}
          <div className="lg:col-span-2 space-y-6">
            {/* Formulaire de nouveau post */}
            {user && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Plus className="h-5 w-5" />
                    Partager quelque chose
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <Textarea
                      placeholder="Quoi de neuf ? Partagez vos pensées avec la communauté..."
                      value={newPostContent}
                      onChange={(e) => setNewPostContent(e.target.value)}
                      rows={4}
                      className="resize-none"
                    />
                    <div className="flex justify-between items-center">
                      <div className="text-sm text-gray-500">
                        {newPostContent.length}/1000 caractères
                      </div>
                      <Button
                        onClick={submitPost}
                        disabled={isSubmitting || !newPostContent.trim()}
                        className="bg-teal-600 hover:bg-teal-700"
                      >
                        {isSubmitting ? "Publication..." : "Publier"}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Affiche publicitaire intégrée */}
            <div className="my-8">
              <SponsoredBanner
                className="h-48 md:h-56"
                autoPlayInterval={8000}
                showControls={true}
              />
            </div>

            {/* Liste des posts */}
            {loading ? (
              <div className="flex justify-center py-12">
                <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-teal-600"></div>
              </div>
            ) : posts.length === 0 ? (
              <Card>
                <CardContent className="flex flex-col items-center justify-center py-12">
                  <MessageSquare className="h-12 w-12 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    {searchQuery
                      ? "Aucun résultat trouvé"
                      : "Aucun post pour le moment"}
                  </h3>
                  <p className="text-gray-500 text-center">
                    {searchQuery
                      ? "Essayez avec d'autres mots-clés"
                      : "Soyez le premier à partager quelque chose avec la communauté !"}
                  </p>
                </CardContent>
              </Card>
            ) : (
              <div className="space-y-6">
                {posts.map((post, index) => (
                  <div key={post.id}>
                    <CommunityPost post={post} onUpdate={fetchPosts} />

                    {/* Affiche publicitaire tous les 3 posts */}
                    {(index + 1) % 3 === 0 && index < posts.length - 1 && (
                      <div className="my-6">
                        <SponsoredBanner
                          className="h-40 md:h-48"
                          autoPlayInterval={10000}
                          showControls={false}
                        />
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Tendances */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="h-5 w-5" />
                  Tendances
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">#MarketplaceGuyane</span>
                    <span className="text-xs text-gray-500">24 posts</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">#ServiceLocal</span>
                    <span className="text-xs text-gray-500">18 posts</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">#Entrepreneuriat</span>
                    <span className="text-xs text-gray-500">15 posts</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">#CommunautéGuyane</span>
                    <span className="text-xs text-gray-500">12 posts</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Règles de la communauté */}
            <Card>
              <CardHeader>
                <CardTitle>Règles de la communauté</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-sm text-gray-600">
                  <p>• Respectez les autres membres</p>
                  <p>• Pas de spam ou de contenu inapproprié</p>
                  <p>• Restez dans le sujet</p>
                  <p>• Signalez les contenus problématiques</p>
                  <p>• Amusez-vous et partagez !</p>
                </div>
              </CardContent>
            </Card>

            {/* Affiche publicitaire sidebar */}
            <div>
              <SponsoredBanner
                className="h-64"
                autoPlayInterval={12000}
                showControls={false}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
